#!/usr/bin/env python3
import datetime
import hashlib
import os
import re
import subprocess
import sys

# This script only modifies SRCS and VER.
keys_to_modify = ['VER', 'SRCS']

# REL will be removed.
keys_to_skip = ['REL']

class logger:
	DEBUG = 1
	INFO = 2
	WARN = 3
	ERR = 4
	QUIET = 5

	level: int = INFO

	@staticmethod
	def out(string, level):
		if level >= logger.level:
			print("nightly-checker> " + string)

	@staticmethod
	def debug(string: str):
		logger.out(string, logger.DEBUG)

	@staticmethod
	def info(string: str):
		logger.out(string, logger.INFO)

	@staticmethod
	def warn(string: str):
		logger.out(string, logger.WARN)

	@staticmethod
	def error(string: str):
		logger.out(string, logger.ERR)


class VCSSource:
	'''
	Class to represent a VCS Source.

	## Methods
	```
	def __init__(self, repo_url: str, ref: str, last_rev: str) -> None
	```
	Default constructor.
	- `repo_url` : URL to the repository.
	- `ref`: Branch to be cloned. Note, not all implementations support this.
	- `last_rev`: Last recorded commit.

	```
	def create(src: dict) -> VCSSource
	```
	Provide an **parsed** entry in SRCS, returns None if not supported, or else the relevant
	subclass.
	The dict should be like this:
	```
	{'name': 'git', 'commit': '4b39a764', 'branch': 'stable', 'url': 'https://github.com/AOSC-Dev/aosc-os-abbs'}
	```
	Only `name` and `url` fields are required. The remaining part will be filled out automatically.
	'''
	vcs_type = ''
	short_vcs_type = ''
	def __init__(self, repo_url: str, ref: str, last_rev: str) -> None:
		# URL to the renote repository
		self.repo_url = repo_url
		# Latest commit of the ref
		self.commit = None
		# Branch of the repo
		self.ref = ref
		# String of the commit date, formated to %Y%m%d (20230718)
		self.commit_date_str = None
		# Timestamp of the latest commit
		self.commit_date_timestamp = 0
		# Revision number (N th commit of the branch)
		self.revision = None
		# Shortened commit
		self.short_commit = None
		# Base release version
		self.base_ver = None
		# Last recorded commit
		self.last_rev = last_rev

		# Local path to clone to
		# Equlas to $SRCREPOS_DIR/$(echo $URL | sha256sum)
		if 'SRCREPOS_DIR' in os.environ:
			self.srcrepo_dir = os.path.abspath(os.environ['SRCREPOS_DIR'])
		else:
			self.srcrepo_dir = os.path.join(os.environ['HOME'], 'srcrepos')

		url_sha256 = hashlib.sha256(self.repo_url.encode()).digest().hex()
		self.repo_path = os.path.join(self.srcrepo_dir, url_sha256)
		try:
			os.makedirs(self.repo_path, exist_ok=True)
		except OSError:
			raise RuntimeError('Unable to create the directory to clone the repositories: {}'.format(self.repo_path))

	@staticmethod
	def create(src_dict: dict[str, str]) -> 'VCSSource':
		if "name" not in src_dict:
			return None
		if src_dict.get("name") == "git":
			# Branch
			ref = src_dict['branch'] if 'branch' in src_dict else 'master'
			# Last recorded commit
			last_rev = src_dict['commit'] if 'commit' in src_dict else None
			return GitSource(src_dict['url'], ref, last_rev)
		if src_dict.get("name") == "bzr":
			# Last recorded commit
			last_rev = src_dict['commit'] if 'commit' in src_dict else None
			return BazzarSource(src_dict['url'], None, last_rev)
		if src_dict.get("name") == "svn":
			# Last recorded commit
			last_rev = src_dict['commit'] if 'commit' in src_dict else None
			return SubVersionSource(src_dict['url'], None, last_rev)
		if src_dict.get("name") == "hg":
			# Last recorded commit
			last_rev = src_dict['commit'] if 'commit' in src_dict else None
			return MercurialSource(src_dict['url'], None, last_rev)
		return None

	def fetch_ref_head(self) -> str:
		'''
		Clones the repository, fetches the relevant information.
		Returns the latest commit.
		'''
		raise NotImplementedError

	def to_version_str(self) -> str:
		'''
		Returns the version string in compliance with AOSC OS Package styling manual.
		Shold be used with a primary source.
		'''
		raise NotImplementedError

	def has_update(self) -> bool:
		'''
		Returns whether if the repository has updates, by comparing between the latest commit and the last recorded commit.
		'''
		raise NotImplementedError

	def check_and_get_output(self, args: list) -> str:
		return subprocess.run(
			args=args,
			stdout=subprocess.PIPE,
			check=True,
			cwd=self.repo_path
		).stdout.decode().strip()

class GitSource(VCSSource):
	vcs_type = 'git'
	short_vcs_type = 'git'
	def __init__(self, url: str, ref: str, last_rev: str) -> None:
		super().__init__(url, ref, last_rev)

	def fetch_ref_head(self: VCSSource) -> str:
		'''
		We need to fetch the latest revision and the nearest tag.
		'''
		try:
			if not os.path.exists(os.path.join(self.repo_path, '.git')):
				logger.info('checking out git tree {} to path {}...'.format(self.repo_url, self.repo_path))
				self.check_and_get_output(args=['git', 'clone', '--quiet', '-b', self.ref, '--depth', '1', self.repo_url, self.repo_path])
			else:
				logger.info('updating git repository {} for {}...'.format(self.repo_path, self.repo_url))
				self.check_and_get_output(args=['git', 'fetch', 'origin'])
				self.check_and_get_output(args=['git', 'pull', '--ff-only', 'origin', self.ref])
			self.commit = self.check_and_get_output(args=['git', 'rev-parse', 'HEAD'])
			self.short_commit = self.check_and_get_output(args=['git', 'rev-parse', '--short', self.commit])
			self.revision = self.check_and_get_output(args=['git', 'rev-list', '--count', self.commit])
			date_timestamp = self.check_and_get_output(args=['git', 'show', '-s', '--format=%ct', self.commit])
			self.commit_date_timestamp = int(date_timestamp)
			self.commit_date_str = datetime.datetime.fromtimestamp(self.commit_date_timestamp).strftime('%Y%m%d')

		except subprocess.CalledProcessError:
			raise Exception(f'Can not check latest commit for ref {self.repo_url}:{self.ref}. Git exited with failure.')
		except Exception:
			raise Exception(f'Failed to fetch {self.repo_url}.')
		return self.commit

	def to_version_str(self: VCSSource) -> str:
		return "{0}+{1}{2}.r{3}.{4}".format(self.base_ver, self.short_vcs_type, self.commit_date_str, self.revision, self.short_commit)

	def has_update(self) -> bool:
		if not self.last_rev:
			return True
		return not self.commit.startswith(self.last_rev)


class BazzarSource(VCSSource):
	vcs_type = 'bazzar'
	short_vcs_type = 'bzr'
	pass


class MercurialSource(VCSSource):
	vcs_type = 'mercurial'
	short_vcs_type = 'hg'
	pass


class SubVersionSource(VCSSource):
	vcs_type = 'subversion'
	short_vcs_type = 'svn'
	pass


def parse_kvs(content: list[str]) -> dict:
	lastline = ''
	parsed_lines = []
	kvs: dict[str, str] = {}
	for line in content:
		logger.debug('Current line: {}'.format(line))
		if len(line.strip()) == 0:
			continue
		if line.startswith('#'):
			continue
		lastline = ' '.join([lastline.rstrip().rstrip('\\'), line]).lstrip()
		if not line.rstrip().endswith('\\'):
			logger.debug('Appending line: {}'.format(lastline))
			parsed_lines.append(lastline)
			lastline = ''
			continue

	logger.debug(f'Parsed content: {parsed_lines}')
	logger.debug('Parsing lines into key and vaules...')
	for line in parsed_lines:
		k, v = re.findall(r"([a-zA-Z_]+?)=(.*)", line)[0]
		if k in keys_to_modify:
			v = v.strip('"').strip("'")
		# Optionally we can expand variables by using r'\${?([a-zA-Z0-9_]+)}?'.
		# This is not necessary for this script. And calling Bash is more accurate in case of substitution.
		# Or to use pyparser, like what ACBS does.
		logger.debug(f'Splited (k, v) = {(k, v)}')
		kvs[k] = v

	logger.debug(f'Parsed keys and vaules: {kvs}')

	return kvs


def parse_src_kvs(val: str) -> list[dict]:
	'''
	This function accepts the vaule of `SRCS`, i.e. you can pass an array of SRCS entries.
	'''
	srcs = []
	for entry in re.split(r'\s+', val):
		logger.debug(f'Parsing entry: {entry}')
		name, spec = entry.split('::', 1)
		kv = {}
		if '::' in spec:
			options_str, url = spec.split('::')
			for option in options_str.split(';'):
				k, v = option.split('=')
				kv[k] = v
		else:
			url = spec
		kv['name'] = name
		kv['url'] = url
		logger.debug(f'Parsed (k, v): {kv}')
		srcs.append(kv)
	return srcs


def check_for_update(parsed_srcs: list[dict], base_ver: str) -> str:
	logger.info('Checking for updates of all VCS sources...')
	count = 0
	vcs_sources = []
	primary_source = None
	for src in parsed_srcs:
		source = VCSSource.create(src)
		if not source:
			logger.info(f'{src["url"]} is not a VCS source. Skipping.')
		if not primary_source:
			primary_source = source
			primary_source.base_ver = base_ver
		vcs_sources.append(source)
		source.fetch_ref_head()
		if not source.has_update():
			logger.info(f'Source {src["url"]} is up to date.')
			continue
		src['commit'] = source.commit
		count += 1
	# We have updates.
	# Then we have to determine who has the lastest commits,
	# by getting their last commit's timestamp.
	# The latest timestamp should always go to the primary source, which we have the base version of the package set.
	if count != 0:
		for src in vcs_sources:
			if src.commit_date_timestamp > primary_source.commit_date_timestamp:
				# We want the returned version string from primary source
				primary_source.commit_date_timestamp = src.commit_date_timestamp
	new_ver = primary_source.to_version_str()
	logger.info(f'{count} Git source(s) have been updated.')
	return count, new_ver if count != 0 else None


def main():
	logger.level = logger.INFO
	pwd = os.path.realpath('.')
	if not os.path.exists(os.path.join(pwd, 'spec')):
		raise FileNotFoundError("spec file does not exist.")

	# Read and parse the spec file
	content = []
	parsed_kvs = {}
	parsed_srcs = []
	with open(os.path.join(pwd, 'spec'), 'r') as f:
		content.extend(l.strip() for l in f.readlines())
	parsed_kvs: dict = parse_kvs(content)
	parsed_srcs = parse_src_kvs(parsed_kvs['SRCS'])

	# Check for the base release version
	try:
		logger.info('Getting the base release version of the package...')
		base_ver = subprocess.run(args=['aosc-findupdate', '-c', '--dry-run', '-x'], stdout=subprocess.PIPE, check=True, cwd=pwd).stdout.decode().strip()
	except subprocess.CalledProcessError:
		raise RuntimeError('Unable to get the base release version!')

	# Check for updates
	count, new_ver = check_for_update(parsed_srcs, base_ver)
	if count == 0:
		logger.info('No updates found across all VCS sources. Bye!')
		exit(0)
	# Write back changes
	parsed_kvs['VER'] = new_ver
	logger.info("Writting back changes...")
	constructed_srcs_values= []
	for src in parsed_srcs:
		if len(src) == 2:
			entry = f'{src["name"]}::{src["url"]}'
		else:
			keys = list(src.keys())
			keys.remove('url')
			keys.remove('name')
			option_str = ';'.join(f"{k}={src[k]}" for k in keys)
			entry = f'{src["name"]}::{option_str}::{src["url"]}'
		constructed_srcs_values.append(entry)
	constructed_srcs = ' \\\n\t'.join(constructed_srcs_values)
	parsed_kvs['SRCS'] = constructed_srcs
	with open(os.path.join(pwd, 'spec'), 'w') as f:
		for key in parsed_kvs:
			if key in keys_to_skip:
				continue
			if key in keys_to_modify:
				f.write('{}="{}"\n'.format(key, parsed_kvs[key]))
			else:
				# Replace \n with \\\n + number of whitespaces.
				expanded_val = parsed_kvs[key].replace('\n','\\\n')
				f.write('{}={}\n'.format(key, expanded_val))
	logger.info("Done writting changes. Have fun!")
	sys.exit(0)


if __name__ == '__main__':
	main()
